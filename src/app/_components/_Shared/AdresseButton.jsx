'use client';
import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import AdresseDialog from './AdresseDialog';
import { Navigation } from 'lucide-react';

export default function AdresseButton() {
  const [isAutoOpen, setIsAutoOpen] = useState(false); // 5 saniyelik popover i√ßin
  const [isDialogOpen, setIsDialogOpen] = useState(false); // Dialog i√ßin state

  // 5 saniyelik otomatik popover kontrol√º
  useEffect(() => {
    const timer = setTimeout(() => setIsAutoOpen(true), 3000);
    return () => clearTimeout(timer);
  }, []);

  return (
    <>
      {/* 5 saniye a√ßƒ±k kalan popover */}
      <Popover open={isAutoOpen} onOpenChange={setIsAutoOpen}> {/* onOpenChange ile popover acildiktan sonra herhangi biryere tiklanirsa pencerenin kapanmasini sagliyoruz aksi halde acik kaliyor. */}
        <PopoverTrigger asChild>
          <Button
          onClick={() => setIsDialogOpen(true)} 
            style={{ outline: 'none', boxShadow: 'none' }}
            className="p-5 w-auto rounded-3xl font-bold text-[#e2186f] bg-[#fde9f1] hover:bg-transparent"
          >
            <Navigation className="w-6 h-6" />
            Gib hier deine Lieferadresse ein
          </Button>
        </PopoverTrigger> 
        <PopoverContent
          // side="bottom"
          //align="center"
          className="flex justify-center bg-[#002855] text-white p-4 shadow-lg/"
        >
          <p>Liefern wir bei dir? Jetzt Adresse eingeben & √ºberpr√ºfen. üè†</p> {/* {"\u{1F3E0}"} */}
        </PopoverContent>
      </Popover>
       {/* Dialog tetiklenmesi */}
       <AdresseDialog open={isDialogOpen} onOpenChange={setIsDialogOpen} />
    </>
  );
}
{/*
1- Use Client dient dazu, dass der Code nur im Browser ausgef√ºhrt wird.
2- useState ist ein Hook, der es uns erm√∂glicht, den Zustand in einer Funktion zu verwenden.
3- useEffect ist ein weiterer Hook, der es uns erm√∂glicht, Seiteneffekte in Funktionskomponenten zu haben.
4- Hook ist eine spezielle Funktion, die es uns erm√∂glicht, React-Funktionen zu verwenden. 
5- isAutoOpen ist ein Zustand, der es uns erm√∂glicht, den Zustand des Popovers zu speichern.
6- setIsAutoOpen ist eine Funktion, die es uns erm√∂glicht, den Zustand des Popovers zu √§ndern.
7- timer ist eine Variable, die es uns erm√∂glicht, den Timer zu speichern. 
8- setTimeout ist eine Funktion, die es uns erm√∂glicht, eine Funktion nach einer bestimmten Zeit auszuf√ºhren.
9- clearTimeout ist eine Funktion, die es uns erm√∂glicht, den Timer zu l√∂schen.
10- isDialogOpen ist ein Zustand, der es uns erm√∂glicht, den Zustand des Dialogs zu speichern.
11- setIsDialogOpen ist eine Funktion, die es uns erm√∂glicht, den Zustand des Dialogs zu √§ndern.
12- Popover ist ein Komponente, die es uns erm√∂glicht, ein Popover zu erstellen.
13- PopoverTrigger ist ein Komponente, die es uns erm√∂glicht, ein PopoverTrigger zu erstellen.
14- G√§be es keinen asChild, k√∂nnte der Trigger den Button nicht direkt verwenden. React w√ºrde den Trigger in einem div umschlie√üen. 
Es wird ein zus√§tzliches <div> innerhalb der Schaltfl√§che geben, was einige CSS-Stile und Ereignisse brechen kann. 
15- onclick ist ein Ereignis, das ausgel√∂st wird, wenn auf die Schaltfl√§che geklickt wird.
16- setIsDialogOpen(true) ist eine Funktion, die es uns erm√∂glicht, den Dialog zu √∂ffnen.
17-PopoverContent ist ein Komponente, die es uns erm√∂glicht, den inhalt des Popovers zu erstellen.
18- Ein Dialog ist ein Schnittstellenelement, das dazu dient, eine Nachricht anzuzeigen oder eine Aktion f√ºr den Benutzer auszuf√ºhren.
Er funktioniert in der Regel als modales Fenster (ein Fenster, das den Zugriff auf den Hintergrundinhalt blockiert, bis es geschlossen wird).
Es wird verwendet, um den Benutzer um eine Best√§tigung zu bitten, ein Formular auszuf√ºllen oder Informationen bereitzustellen.
*/}
